-- Create the ecommerce database
CREATE DATABASE ecommerce;

-- Use the ecommerce database
USE ecommerce;

-- Create the customers table
CREATE TABLE customers(
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
email VARCHAR(100) UNIQUE NOT NULL,
address VARCHAR(225) NOT NULL
);

-- Create the orders table
CREATE TABLE orders(
id INT AUTO_INCREMENT PRIMARY KEY,
customer_id INT,
order_date DATE,
total_amount DECIMAL(10,2),
FOREIGN KEY(customer_id) REFERENCES customers(id)
);

-- Create the products table
CREATE TABLE products(
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
price DECIMAL(10,2) NOT NULL,
description TEXT
);

-- Insert sample data into customers table
INSERT INTO customers (name, email, address) 
VALUES
('Arjun Kumar', 'arjunkumar@gmail.com', 'Mumbai'),
('Ashish sharma', 'ashishsharma@gmail.com', 'Delhi'),
('Murugan Ashwin', 'muruganashwin@gmail.com', 'chennai'),
('Micheal Thomas', 'michealthomas@gmail.com', 'Tiruenlveli');

-- Insert sample data into orders table
INSERT INTO orders (customer_id, order_date, total_amount) 
VALUES
(1, '2024-10-01', 70.00),
(2, '2024-09-25', 35.00),
(3, '2024-08-30', 50.00),
(1, '2024-09-10', 100.00),
(4, '2024-08-14', 180.00);


-- Insert sample data into products table
INSERT INTO products (name, price, description)
VALUES
('Product A', 20.00, 'Description of Product A'),
('Product B', 35.00, 'Description of Product B'),
('Product C', 50.00, 'Description of Product C'),
('Product D', 48.00, 'Description of Product D'),
('Product E', 65.00, 'Description of Product E');

-- Retrieve all customers who have placed an order in the last 30 days.
SELECT DISTINCT customers.name
FROM customers 
JOIN orders ON customers.id = orders.customer_id
WHERE orders.order_date >= CURDATE() - INTERVAL 30 DAY;

-- Get the total amount of all orders placed by each customer.
SELECT customers.name, SUM(orders.total_amount) AS total_amount
FROM customers
JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.name;

-- Update the price of Product C to 45.00.
UPDATE products
SET price = 45.00
WHERE name = 'Product C';

-- Add a new column discount to the products table.
ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

-- Retrieve the top 3 products with the highest price.
SELECT name, price FROM products
ORDER BY price DESC
LIMIT 3;

-- Get the names of customers who have ordered Product A
SELECT DISTINCT customers.name
FROM customers 
JOIN orders ON customers.id = orders.customer_id
JOIN order_items ON orders.id = order_items.order_id
JOIN products  ON order_items.product_id = products.id
WHERE products.name = 'Product A';

-- Join the orders and customers tables to retrieve the customer's name and order date for each order
SELECT customers.name, orders.order_date 
FROM customers
JOIN orders ON orders.customer_id = customers.id;

-- Retrieve the orders with a total amount greater than 150.00
SELECT * FROM orders
WHERE total_amount > 150.00;

-- -- Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.
CREATE TABLE order_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES orders(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Retrieve the average total of all orders.
SELECT AVG(total_amount) AS average_total 
FROM orders;